//client

1. Start the client program.
2. Connect to the server using a socket (TCP/IP).
3. Prompt the user to enter the filename to be requested.
4. Send the filename to the server using the established connection.
5. Wait for the server's response.
6. If the server sends an error message (file not found or other), display the error message and close the connection.
7. If the server sends the file:
   1. Create a new file on the client-side to save the received data.
   2. Receive the file data from the server and write it to the new file.
   3. Close the file and the connection.
   4. Display a success message indicating that the file transfer was successful.
8. Terminate the client program.


// server

1. Start the server program.
2. Create a socket to listen for incoming client connections (TCP/IP).
3. Bind the socket to a specific port on the server.
4. Listen for incoming connections from clients.
5. Accept incoming connections from clients.
6. Once a client connects, fork a new child process to handle the client.
7. In the child process:
   1. Receive the filename from the client.
   2. Check if the requested file exists on the server-side.
   3. If the file does not exist, send an error message to the client and close the connection.
   4. If the file exists:
      1. Open the file in binary mode and read its content.
      2. Send the file data to the client through the connection.
      3. Close the file and the connection to the client.
8. In the parent process:
   1. Close the client socket (to allow accepting new connections).
   2. Wait for any child process to terminate using `waitpid` with `WNOHANG`.
   3. Go back to accepting incoming connections.
9. Terminate the server program when needed.

